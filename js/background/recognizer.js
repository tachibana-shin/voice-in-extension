class Recognizer{constructor(t){const e=new webkitSpeechRecognition;this.recognition=e,this.isListening=!1,this.stopped=!1,this.startHref="",this.startHost="",this.startInitiated=!1,this.contextMenuEntry=chrome.contextMenus.create({title:"Start Dictation",contexts:["editable"],id:"voicein_context"},(()=>{})),this.settings=t,e.continuous=!0,e.interimResults=!0,e.maxAlternatives=1,e.lang=t.currentLang,e.onstart=this.startHandler.bind(this),e.onspeechstart=()=>{},e.onspeechend=()=>{},e.onnomatch=()=>{},e.onend=this.endHandler.bind(this),e.onerror=this.errorHandler.bind(this),this.lastStart=-1,this.lastRecognized=-1,this.idleTimeout=6e4,chrome.contextMenus.onClicked.addListener(this.contextMenuOnClick.bind(this)),chrome.browserAction.onClicked.addListener(this.browserActionOnClick.bind(this))}checkTab(t){return!(!this.settings||!this.settings.tabChangeOk)||void 0!==t&&null!=t&&!(t.length<1)&&t[0].id===this.settings.currentTabId}contextMenuOnClick(t,e){this.startStop(e)}browserActionOnClick(t){this.startStop(t)}startStop(t){if(this.isListening)this.stop();else{this.startHref=t.url;try{const e=new URL(t.url);this.startHost=e.origin}catch(t){console.log(t)}this.settings.currentTabId=t.id,this.start()}}updateContextMenu(){const t=this.isListening?"Stop Dictation":"Start Dictation";chrome.contextMenus.update(this.contextMenuEntry,{title:t})}updateBrowserActionIcon(){this.isListening?chrome.browserAction.setIcon({path:"/images/ic_mic_red_36dp.png"}):chrome.browserAction.setIcon({path:"/images/ic_mic_gray_36dp.png"})}start(){if(!this.startInitiated){this.startInitiated=!0,this.lastStart=Date.now();try{this.recognition.lang=this.settings.currentLang,this.recognition.start()}catch(t){console.log("start failed",t)}}}stop(){this.stopped=!0;try{this.recognition.stop()}catch(t){console.log("stop failed",t)}}restart(){this.isListening?this.recognition.stop():this.start()}stopRecognition(){try{this.recognition.stop()}catch(t){console.log("stopRecognition failed",t)}}startHandler(){this.isListening||(this.isListening=!0,this.lastStart=Date.now(),this.updateContextMenu(),this.updateBrowserActionIcon(),chrome.tabs.query({active:!0,currentWindow:!0},(t=>{if(!this.checkTab(t))return;const e=t[0];chrome.tabs.sendMessage(e.id,{action:"recognition_started_in_bg",url:e.url},(()=>{if(chrome.runtime.lastError&&"Could not establish connection. Receiving end does not exist."===chrome.runtime.lastError.message){console.error("Failed to send recognition_started_in_bg to tab, injecting scripts");const t=()=>{chrome.tabs.sendMessage(e.id,{action:"recognition_started_in_bg",url:e.url})};Utils.injectIntoTab(e,t)}}))})))}endHandler(){this.startInitiated=!1;const t=Math.max(this.lastRecognized,this.lastStart);if(!this.stopped&&Date.now()-t<this.idleTimeout)console.log("In EndHandler - Continuing .."),this.start();else{console.log("In EndHandler - Stopping .."),this.stopped=!1,this.isListening=!1;const t=Date.now()-this.lastStart;mpTrack("Session",{duration:t,href:this.startHref,host:this.startHost,lang:this.settings.currentLang}),console.log("Recognition lasted for %d ms",t),this.updateContextMenu(),this.updateBrowserActionIcon(),chrome.tabs.query({active:!0,currentWindow:!0},(t=>{this.checkTab(t)?chrome.tabs.sendMessage(t[0].id,{action:"recognition_stopped_in_bg"}):chrome.tabs.sendMessage(this.settings.currentTabId,{action:"recognition_stopped_in_bg"})}))}}errorHandler(t){console.log("RecognizerError",t);let e="",i=!1;"no-speech"===t.error?e="info_no_speech":"audio-capture"===t.error?(e="info_no_microphone",i=!0):"not-allowed"===t.error?(e="info_denied",chrome.runtime.openOptionsPage((()=>{})),i=!0):"network"===t.error?e="info_network":"aborted"===t.error&&(e="info_aborted"),i&&(this.stopped=!0)}setOnResult(t){this.recognition.onresult=t}}